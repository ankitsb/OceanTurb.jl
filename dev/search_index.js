var documenterSearchIndex = {"docs":
[{"location":"#OceanTurb.jl-1","page":"Home","title":"OceanTurb.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"How inappropriate to call this planet Earth when it is quite clearly Ocean.Arthur C. Clark","category":"page"},{"location":"#","page":"Home","title":"Home","text":"OceanTurb.jl implements one-dimensional partial differential equations that model turbulent convection and diffusion in the ocean surface boundary layer. It's purpose is the exploration, development, and practical usage of ocean turbulence models.","category":"page"},{"location":"#In-the-scheme-of-things-1","page":"Home","title":"In the scheme of things","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Just beneath the surface of the ocean, atmospheric fluxes of energy, heat fresh water, salinity, and momentum due to wind, waves, precipitation, evaporation, heating, cooling, and radiation drive turbulence and mediate the exchange of quantities like heat, momentum, and carbon between the atmosphere and ocean interior. Models that approximate the effects of atmospheric forcing on turbulence and turbulent mixing in the upper ocean are critical components in ocean circulation models and coupled climate models.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Open julia, press ] at the Julian prompt to enter package manager mode, and type","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add OceanTurb","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Use help mode by typing ? to find information about key functions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"help?> iterate!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"which should give the information","category":"page"},{"location":"#","page":"Home","title":"Home","text":"iterate!","category":"page"},{"location":"#OceanTurb.iterate!","page":"Home","title":"OceanTurb.iterate!","text":"iterate!(model; Δt, Nt)\n\nStep model forward in time for Nt steps with step size Δt.\n\n\n\n\n\nStep forward m by Δt with the backward Euler method.\n\n\n\n\n\n","category":"function"},{"location":"#Modules-and-models-1","page":"Home","title":"Modules and models","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Solvers for various turbulence models are implemented in submodules of OceanTurb.jl. For example, our simplest module solves the 1D diffusion equation. A diffusion Model is instantiated by writing","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using OceanTurb\n\n# 100-grid point model with height 1.0 and diffusivity 0.01.\nmodel = Diffusion.Model(grid = UniformGrid(N=100, L=1.0), parameters = Parameters(K=0.01))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Setting an initial condition is done by writing","category":"page"},{"location":"#","page":"Home","title":"Home","text":"c₀(z) = exp(-(z + 0.5)^2 / 0.005)\nmodel.solution.c = c₀","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Time stepping a model forward looks like","category":"page"},{"location":"#","page":"Home","title":"Home","text":"iterate!(model, Δt=0.01, Nt=100)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This example, and more, can be found in the /examples directory.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In addition to simple diffusion we have models for","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The K-Profile-Parameterization proposed by   Large et al (1994)\nA 'modular', and therefore generic, K-profile parameterization that has multiple models   for diffusivity, diffusivity shapes and profiles, nonlocal fluxes including a diagnostic plume model,    and mixing depth.\nThe Pacanowski-Philander parameterization","category":"page"},{"location":"#Authors-1","page":"Home","title":"Authors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The author of this software is Gregory L. Wagner.","category":"page"},{"location":"basics/#Turbulent-boundary-layers-1","page":"Turbulence, fluxes, and physics","title":"Turbulent boundary layers","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"newcommandc \nnewcommandp \nnewcommanddpartial\n\nnewcommandr1mathrm1\nnewcommandb1boldsymbol1\n\nnewcommandeemathrme\n\nnewcommandbeqbeginequation\nnewcommandeeqendequation\n\nnewcommandbeqsbegingather\nnewcommandeeqsendgather","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Models for the turbulent ocean surface boundary layer are partial differential equations that approximate the effects of atmospheric forcing on the turbulent vertical flux and evolution of large-scale temperature, salinity, and momentum fields.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Internal and surface fluxes of heat are due to","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"absorption of incoming shortwave solar radiation;\ncooling by outgoing longwave radiation;\nlatent and sensible heat exchange with the atmosphere.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Surface fluxes of salinity occur due to evaporation and precipitation, while momentum fluxes are associated with atmospheric winds.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Vertical turbulent fluxes are typically associated with","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"gravitational instability and convection, and\nmechanical turbulent mixing associated with currents and wind forcing.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"OceanTurb.jl uses an implementation of atmospheric and radiative forcings that is shared across all models. The models therefore differ in the way they parameterize convective and wind-driven mechanical mixing.","category":"page"},{"location":"basics/#Coordinate-system-1","page":"Turbulence, fluxes, and physics","title":"Coordinate system","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"We use a Cartesian coordinate system in which gravity points downwards, toward the ground or bottom of the ocean. The vertical coordinate z thus increases upwards. We locate the surface at z=0. This means that if the boundary layer has depth h, the bottom of the boundary layer is located at z=-h.","category":"page"},{"location":"basics/#Governing-equations-1","page":"Turbulence, fluxes, and physics","title":"Governing equations","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"The one-dimensional, horizontally-averaged boundary-layer equations for horizontal momentum U and V, salinity S, and temperature T are","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"beqs\nU_t =   f V - d_z overlinew u      + F_u      c labelxmomentum \nV_t = - f U - d_z overlinew v      + F_v      c \nT_t =       - d_z overlinew theta + F_theta c labeltemperature \nS_t =       - d_z overlinew s      + F_s      c labelsalinity \neeqs","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"where subscripts t and z denote derivatives with respect to time and the vertical coordinate z and f is the Coriolis parameter. The lowercase variables u, v, s, and theta refer to the three-dimensional perturbations from horizontal velocity, salinity, and temperature, respectively. In \\eqref{xmomentum}–\\eqref{temperature}, internal forcing of a variable Phi is denoted F_phi.","category":"page"},{"location":"basics/#Buoyancy-1","page":"Turbulence, fluxes, and physics","title":"Buoyancy","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"OceanTurb.jl uses a linear equation of state, so that buoyancy is deteremined from temperature T and salinity S via","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"beginalign\nB  equiv - fracg rhorho_0 \n       = g left  alpha left ( T - T_0 right ) - beta left ( S - S_0 right ) right  c\nendalign","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"where g = 981  mathrmm  s^-2 alpha = 2 times 10^-4  mathrmK^-1, and beta = 8 times 10^-5, are the default gravitational acceleration, the thermal expansion coefficient, and the haline contraction coefficient, respectively.","category":"page"},{"location":"basics/#Surface-fluxes-1","page":"Turbulence, fluxes, and physics","title":"Surface fluxes","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Turbulence in the ocean surface boundary layer is driven by fluxes from the atmosphere above. A surface flux of some variable phi is denoted Q_phi. Surface fluxes include","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Momentum fluxes due to wind, denoted Q_u bx + Q_v by = -rho_0 btau for wind stress btau;\nTemperature flux Q_theta = - Q_h  rho_0 c_P associated with 'heating' Q_h;\nSalinity flux Q_s = (E-P)S associated evaporation E and precipitation P.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"We use the traditional convention ordinary to physics, but not always ordinary to oceanography, in which a  positive flux corresponds to the movement of a quantity in the positive z-direction. This means, for example, that a positive vertical velocity w gives rise to a positive advective flux w phi. This convention also implies that a positive temperature flux at the ocean surface –- corresponding to heat fluxing upwards, out of the ocean, into the atmosphere –- implies a cooling of the ocean surface boundary layer.","category":"page"},{"location":"basics/#Turbulent-velocity-scales-1","page":"Turbulence, fluxes, and physics","title":"Turbulent velocity scales","text":"","category":"section"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"The surface buoyancy flux is determined from temperature and salinity fluxes:","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"beq\nQ_b = g left ( alpha Q_theta - beta Q_s right ) p\neeq","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"The velocity scale of turbulent motions associated with buoyancy flux Q_b and velocity fluxes Q_u and Q_v are","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"beq\nw_star equiv  h Q_b ^13 qquad textand qquad u_star equiv  btau  rho_0 ^12 p\neeq","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"where h is the depth of the 'mixing layer', or the depth to which turbulent mixing and turbulent fluxes penetrate, btau is wind stress, and rho_0 = 1028  mathrmkg  m^-3 is a reference density.","category":"page"},{"location":"basics/#","page":"Turbulence, fluxes, and physics","title":"Turbulence, fluxes, and physics","text":"Note that we also define a turbulent velocity scale for stabilizing buoyancy fluxes Q_b  0, even though a stabilizing buoyancy flux suppresses, rather than generates, turbulence.","category":"page"},{"location":"numerics/#Numerical-methods-in-OceanTurb.jl-1","page":"Numerical methods","title":"Numerical methods in OceanTurb.jl","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"OceanTurb.jl uses a one-dimensional finite-volume method to discretize momentum, temperature, salinity, and other variables in the z-direction. A variety of explicit and implicit-explicit schemes are implemented for temporal integration.","category":"page"},{"location":"numerics/#Spatial-discretization-1","page":"Numerical methods","title":"Spatial discretization","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"An ASCII-art respresentation of an example grid with N=3 is","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":" ▲ z\n |\n         i=4           *         \n                j=4   ===  Top   ▲              \n         i=3           *         | Δf[3]\n                j=3   ---        ▼\n         i=2           *             ▲            \n                j=2   ---            | Δc[2]\n         i=1           *             ▼  \n                j=1   ===  Bottom\n         i=0           *           ","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"where the double lines indicate the top and bottom of the domain, the single lines indicate \"face\" boundaries, the i's index cell centers (nodes) and j's index the z-location of cell interfaces (faces). Horizontal momentum and tracer variables are located at cell centers, while fluxes of these quantities (and vertical-velocity-like variables when present) are located at cell faces. The cells at i=0 and i=4 are 'ghost cells', whose values are set according to the boundary condition. For a no flux or zero gradient boundary condition, for example, we would set c[0]=c[1] and c[4]=c[3].","category":"page"},{"location":"numerics/#Finite-volume-derivatives-and-fluxes-1","page":"Numerical methods","title":"Finite volume derivatives and fluxes","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"The derivative of a quantity Phi at face i is","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"newcommandc \nnewcommandp \nnewcommanddpartial\n\nnewcommandr1mathrm1\n\nnewcommandeemathrme\n\nnewcommandbeqbeginequation\nnewcommandeeqendequation\n\nnewcommandbeqsbegingather\nnewcommandeeqsendgather\n\nbeq\nleft( d_z Phi right )_i = fracPhi_i - Phi_i-1Delta c_i c\neeq","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"where Phi_i denotes the value of Phi at cell i, and Delta c_i = z_c i - z_c i-1 is the vertical separation between node i and cell point i-1.","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"With diffusivities defined on cell interfaces, the diffusive flux across face i is K_i left ( d_z Phi right )_i. The (negative of the) divergence of the diffusive flux at node i is therefore","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"newcommandKdz1K_1 left ( d_z Phi right )_1 \nbeginalign\nleft ( d_z K d_z Phi right )_i = frac Kdzi+1 - Kdzi Delta f_i c \n= frac\n          tfracK_i+1Delta c_i+1 Phi_i+1\n        - left ( tfracK_i+1Delta c_i+1 + tfracK_iDelta c_i right ) Phi_i\n         + tfracK_iDelta c_i Phi_i-1Delta f_i p\n labelfluxdivop\nendalign","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"In the top cell where i=N, the diffusive flux is","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beginalign\nleft ( d_z K d_z Phi right )_N = frac - Q_mathrmtop - K_N left ( d_z Phi right )_NDelta f_N c \n= -fracQ_mathrmtopDelta f_N - fracK_N Phi_N - K_N Phi_N-1Delta f_N Delta c_N p\n labelfluxdivop_top\nendalign","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"In the bottom cell where i=1, on the other hand, the diffusive flux is","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beginalign\nleft ( d_z K d_z Phi right )_1 = frac  K_2 left ( d_z Phi right )_2 + Q_mathrmbottomDelta f_1 c \n= fracQ_mathrmbottomDelta f_1 + fracK_2 Phi_2 - K_2 Phi_1Delta f_1 Delta c_2\nlabelfluxdivop_bottom\nendalign","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"For negative advective mass fluxes M defined at cell centers (corresponding to downdrafts or down-travelling plumes) imply an advective flux divergence","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beq\nd_z left ( M Phi right )_i = fracM_i+1 Phi_i+1 - M_i Phi_iDelta c_i+1\neeq","category":"page"},{"location":"numerics/#Time-integration-1","page":"Numerical methods","title":"Time integration","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"To integrate ocean surface boundary layer models forward in time, we implement various explicit and implicit-explicit time-stepping schemes. The function iterate!(model, Δt, Nt) steps a model forward in time.","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"Timesteppers in OceanTurb.jl integrate equations of the form","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beq labelequationform\nd_t Phi = - d_z left ( M Phi right ) + left ( d_z K d_z right ) Phi - L Phi + R(Phi) c\neeq","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"where Phi(z t) is a variable like velocity, temperature, or salinity, M, K, and L are an advective 'mass flux', diffusivity, and damping coefficient which are a general nonlinear functions of Phi, z, and external parameters, and R is an arbitrary function representing any number of processes, including the Coriolis force or external forcing.","category":"page"},{"location":"numerics/#Time-integration-methods-1","page":"Numerical methods","title":"Time integration methods","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"We implement iterate! functions and types for:","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"explicit forward Euler\nsemi-implicit backward Euler","category":"page"},{"location":"numerics/#Forward-Euler-method-1","page":"Numerical methods","title":"Forward Euler method","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"The explicit forward Euler time integration scheme obtains Phi at time-step n+1 using the formula","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beq\nPhi^n+1 = Phi^n + Delta t  big  - d_z left ( M^n Phi^n right ) + left ( d_z K^n d_z right ) Phi^n - L^n Phi^n + R left ( Phi^n right ) big \neeq","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"where the superscripts n and n+1 denote the solution at time-step n and n+1, respectively.","category":"page"},{"location":"numerics/#Backward-Euler-method-1","page":"Numerical methods","title":"Backward Euler method","text":"","category":"section"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"The backward Euler method obtains Phi at time-step n+1 using the formula","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beq\nPhi^n+1\n  + Delta t left  d_z left ( M^n Phi^n+1 right ) - left ( d_z K^n d_z right ) Phi^n+1 + L^n Phi^n+1 right \n    = Phi^n + Delta t R left ( Phi^n right )\neeq","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"The z-derivatives in the advective and diffusive terms generate an elliptic problem to be solved for Phi^n+1 at each time-step. In the finite volume discretization used by OceanTurb.jl, this elliptic problem becomes a matrix problem of the form","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beq\nmathcalL^n_ij Phi^n+1_j = left  Phi^n + Delta t R left ( Phi^n right ) right _i\neeq","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"where mathcalL^n_ij is a matrix operator at time-step n, and the subscripts i or j denote grid points i or j. For the diffusive problems considered by our backward Euler solver, the matrix multiplication mathcalL^n_ij Phi_j^n+1 has the form","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"beginalign\nmathcalL^n_ij Phi_j^n+1 = left  1 + Delta t left ( d_z M^n - d_z K^n d_z + L^n right ) right _ij Phi_j^n+1 \n\n= left  beginmatrix\n\n1 + Delta t left ( L^n_1 + tfracK^n_2Delta f_1 Delta c_2 - tfracM_1^nDelta c_2 right )\n   Delta t left ( tfracM_2^nDelta c_2 - tfracK^n_2Delta f_1 Delta c_2 right )\n     cdot  cdot  cdot  cdot \n\nddots  ddots  ddots  cdot  cdot  cdot \n\ncdot\n   - Delta t tfracK^n_iDelta c_i Delta f_i\n   1 + Delta t\n    left  L^n_i + tfracK^n_i+1Delta f_i Delta c_i+1 + tfracK^n_iDelta f_i Delta c_i - fracM^n_iDelta c_i+1 right \n   Delta t left ( tfracM^n_i+1Delta c_i+1 - tfracK^n_i+1Delta c_i+1 Delta f_i+1 right )  cdot  cdot \n\ncdot  cdot  ddots  ddots  ddots  cdot \n\ncdot  cdot  cdot  cdot\n   - Delta t tfracK^n_NDelta c_N Delta f_N\n   1 + Delta t left ( L^n_N + tfracK^n_NDelta c_N Delta f_N - tfracM^n_NDelta c_N+1 right )\n\nendmatrix right \n\nleft  beginmatrix\nPhi^n+1_1 11ex\nvdots 11ex\nPhi^n+1_i 11ex\nvdots 11ex\nPhi^n+1_N\nendmatrix right \nlabelimplicitoperatormatrix\nendalign","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"To form the matrix operator in \\eqref{implicitoperatormatrix}, we have used the second-order flux divergence finite difference operators in \\eqref{fluxdivop}–\\eqref{fluxdivop_bottom}.","category":"page"},{"location":"numerics/#","page":"Numerical methods","title":"Numerical methods","text":"It is crucial to note that the diffusive operator that contributes to mathcalL^n_ij does not include fluxes across boundary faces. In particular, mathcalL^n_ij in \\eqref{implicitoperatormatrix} enforces a no-flux condition across the top and bottom faces. Accordingly, fluxes through boundary faces due either to Dirichlet (Value) boundary conditions or non-zero fluxes are accounted for by adding the contribution of the flux diverence across the top and bottom face to R left ( Phi right ).","category":"page"},{"location":"models/kpp/#The-K-Profile-Parameterization-(KPP)-1","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"newcommandc          \nnewcommandp          \nnewcommandd         partial\nnewcommandr1      mathrm1\nnewcommandb1      boldsymbol1\nnewcommandee        mathrme\nnewcommanddi         mathrmd\nnewcommandep        epsilon\n\nnewcommandbeq       beginequation\nnewcommandeeq       endequation\nnewcommandbeqs      begingather\nnewcommandeeqs      endgather\n\n Non-dimensional numbers\nnewcommandRi        mathrmRi\nnewcommandSL        mathrmSL\nnewcommandK         mathcalE\nnewcommandW         mathcalW\n\nnewcommandbtau      btau  wind stress vector\n\n Model functions and constants\nrenewcommandF2      Upsilon^1_2\nrenewcommandC2      C^1_2\n\nnewcommanduwind     u_star\nnewcommandubuoy     w_star\n\nnewcommandNL        NL","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The K-Profile-Parameterization, or \"KPP\", is proposed by Large et al (1994) as a model for convective and wind-driven mixing in the ocean surface boundary layer. In KPP, vertical turbulent fluxes of a quantity phi are parameterized as","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\noverlinew phi = - K_phi d_z Phi + NL_phi c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where Phi is the resolved or horizontally-averaged quantity, K_phi is a turbulent diffusivity, and NL_phi is a 'non-local' flux.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The non-local flux and turbulent diffusivity are defined to vanish at the surface, and at the bottom of the 'mixing layer' h, which roughly corresponds to the depth at which turbulent fluxes and turbulent kinetic energy decay to zero.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The various numerical implementations of 'KPP' have effectively resulted in the proliferation of practically distinct KPP models in different codes. Here we describe the implementation of KPP in OceanTurb, which is meant to follow the version of KPP described by the Community Vertical Mixing Project (CVMix).","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The KPP model has three distinct parts:","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"A model for the mixing layer depth, h.\nA model for the non-local flux, NL_Phi.\nA model for the local diffusivity, K_Phi.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Below, we denote 'model parameters' as Cmathrmlabelmathrmvar, where 'label' describes the parameter and 'var' is a variable like U V T or S.","category":"page"},{"location":"models/kpp/#Mixing-depth-model-in-CVMix-KPP-1","page":"The K-Profile-Parameterization (KPP)","title":"Mixing depth model in CVMix KPP","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The mixing layer depth h is defined implicitly via the bulk Richardson number criterion","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq labelbulk_ri\nCRi = frach left ( 1 - tfrac12 Cep right ) Delta B(-h) Delta bU(-h)^2 + K(-h) \neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where the critical Ri is CRi = 03. The operator Delta is defined","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nDelta Phi(z) = -frac1CSL z int_CSL z^0 Phi(z) di z - Phi(z) c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where CSL = 01 is the surface layer fraction. The function K(-h) parameterizes unresolved kinetic energy associated with convective plumes,","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq  labelunresolved_ke\nK(-h) = CK (-z)^43 sqrt max left  0 B_z(z) right   max left  0 Q_b right ^13 + CK_0 p\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The unresolved kinetic energy constant is CK = 432 and the minimum unresolved kinetic energy is CK_0 = 10^-11. To solve \\eqref{bulk_ri} for h, we evaluate the right side of \\eqref{bulk_ri} for z  0 at increasing depths until the right side rises above the critical CRi. We then linearly interpolate to find h.","category":"page"},{"location":"models/kpp/#'Countergradient'-non-local-flux-model-in-CVMix-KPP-1","page":"The K-Profile-Parameterization (KPP)","title":"'Countergradient' non-local flux model in CVMix KPP","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The non-local flux is defined only for T and S, and is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nNL_phi = CNL Q_phi d (1 - d)^2 c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where d = -zh is a non-dimensional depth coordinate and CNL = 633.","category":"page"},{"location":"models/kpp/#K-Profile-model-in-CVMix-KPP-1","page":"The K-Profile-Parameterization (KPP)","title":"K-Profile model in CVMix KPP","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The KPP diffusivity is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nK_phi = h W_Phi(d) d ( 1 - d )^2 c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where W_Phi(d) is the turbulent velocity scale for variable phi.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"We define the ratios","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nr_b equiv left ( fracubuoyuwind right )^3 qquad textand\nqquad r_tau equiv left ( fracuwindubuoy right )^3 = frac1r_b p\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"In wind-driven turbulence under stable buoyancy forcing such that Q_b  0, the turbulent velocity scale is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nW_Phi = frac Ctau uwind left ( 1 + Cmathrmstab r_b d right )^Cn p\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where Ctau = 04 is the Von Karman constant, Cmathrmstab = 20, and Cn=1.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"In wind-driven turbulence but under destabilizing buoyancy forcing, when min left  CSL d right   Cdphi r_tau, the turbulent velocity scale is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nW_Phi(d) = Ctau uwind left ( 1 + Cmathrmunst r_b min left  CSL d right  right )^CmtauPhi c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where CmtauU= 14, CmtauT = 12, Cmathrmunst = 64, the transition parameter for velocities is CdU = 05, and the transition parameter for tracers is CdT = 25.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"In convection-driven turbulence affected by wind mixing, when min left  CSL d right  = Cdphi r_tau, the turbulent velocity scale is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nW_Phi(d) = CbPhi ubuoy left ( min left  CSL d right  + Ctau bPhi r_tau right )^CmbPhi c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"where CbU = CbV = 0215, CbT = CbS = 253, CmbU = CmbT=13, Ctau bU = Ctau bV = 0374, and Ctau bT = Ctau bS = -0717.","category":"page"},{"location":"models/kpp/#Selected-tests-1","page":"The K-Profile-Parameterization (KPP)","title":"Selected tests","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"See /test/test_kpp.jl for more tests.","category":"page"},{"location":"models/kpp/#Linear-temperature-profile-and-no-velocity-field-1","page":"The K-Profile-Parameterization (KPP)","title":"Linear temperature profile and no velocity field","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Some simple tests can be defined when the model state is U=V=S=0 and T = gamma z. In this case the buoyancy becomes B = g alpha gamma z and the buoyancy gradient is B_z = g alpha gamma. If we further take CSL to 0 and Q_b  0, and note that the value of T in the top grid cell is T_N = -gamma Delta z  2, where N is the number of grid points, we find that","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nDelta T(-h) = gamma h - T_N c\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"and","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nDelta B(-h) = g alpha gamma h - B_N p\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The unresolved kinetic energy function is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nK(-h) = CK h^43 sqrtg alpha gamma Q_b^13 p\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The bulk Richardson number criterion then becomes","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beginalign\nCRi = frach Delta B(-h)K(-h) c \n          = fracg alpha gamma h^2 - h B_NCK h^43 sqrtg alpha gamma Q_b^13 c \n          = fracg alpha gamma h - B_NCK sqrtg alpha gamma left ( h Q_b right )^13 c \nendalign","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Modifying the temperature profile so that T_N = B_N = 0 allows us to analytically calculate the mixed layer depth:","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nh = left ( CRi CK right )^32 sqrtQ_b left ( g alpha gamma right )^-34 p\nlabelanalyticaldepth\neeq","category":"page"},{"location":"models/kpp/#Linear-temperature-profile-and-linear-shear-1","page":"The K-Profile-Parameterization (KPP)","title":"Linear temperature profile and linear shear","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Consider a piecewise-constant temperature profile","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nT(z) =  left  beginmatrix\n  T_0  quad textfor  z  -h c \n  -T_0  quad textfor  z  -h c\n  endmatrix right \neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"and a velocity profile","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nU(z) =  left  beginmatrix\n  U_0  quad textfor  z  -h c \n  -U_0  quad textfor  z  -h c\n  endmatrix right \neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"so that T(z=-h) = U(z=-h) = 0. We then have Delta T(-h) = T_0 and Delta U^2(-h) = U_0^2, so that with g=alpha=1,","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nCRi = frach T_0U_0^2 p\nlabelsheardepth\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"setting h = 9, CRi=1, T_0 = 1, and U_0=3 yields a consistent solution.","category":"page"},{"location":"models/kpp/#Limiting-cases-for-turbulent-velocity-scales-1","page":"The K-Profile-Parameterization (KPP)","title":"Limiting cases for turbulent velocity scales","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Under zero momentum forcing, the turbulent vertical velocity scale is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nW_phi = Cbphi left ( Cep right )^13  h Q_b ^13 p\nlabelbuoyscaletest\neeq","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"We write the test in \\eqref{buoyscaletest} using the depth in \\eqref{analyticaldepth}","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Under zero buoyancy forcing, the turbulent velocity scale is","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"beq\nW_phi = Ctau uwind p\nlabelwindscaletest\neeq","category":"page"},{"location":"models/kpp/#Table-of-model-parameters-1","page":"The K-Profile-Parameterization (KPP)","title":"Table of model parameters","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The default values for adjustable model parameters in KPP are","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Parameter Value Description\nCRi 0.3 Bulk Richardson number criterion\nCSL 0.1 Surface layer fraction\nCK 3.19 Unresolved kinetic energy constant\nCNL 6.33 Non-local flux proportionality constant\nCtau 0.4 Wind mixing constant / von Karman parameter\nCmathrmstab 2.0 Proportionality constant for effect of stable buoyancy forcing on wind mixing\nCn 1.0 Exponent for effect of stable buoyancy forcing on wind mixing\nCmathrmunst 6.4 Proportionality constant for effect of unstable buoyancy forcing on wind mixing\nCmtauU 0.25 Exponent for effect of unstable buoyancy forcing on wind mixing of momentum\nCmtauT 0.5 Exponent for effect of unstable buoyancy forcing on wind mixing of momentum\nCbU 0.599 Convective mixing constant for momentum\nCbT 1.36 Convective mixing constant for scalars\nCdU 0.5 Transitional normalized depth for unstable mixing of momentum\nCdT 2.5 Transitional normalized depth for unstable mixing of scalars\nCmbU 0.33 Exponent for effect of wind on convective mixing of momentum\nCmbT 0.33 Exponent for effect of wind on convective mixing of scalars\nK_u0 10^-5 Interior/background turbulent diffusivity for momentum\nK_T0 10^-5 Interior/background turbulent diffusivity for temperature\nK_S0 10^-5 Interior/background turbulent diffusivity for salinity","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Note: all parameters are greater than 0, and 0 ge CSL ge 1.","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"The default values for 'non-adjustable' parameters in KPP are","category":"page"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Parameter Value Description\nCtau bU 0.374 \nCtau bT -0.717 \nCK_0 1e-11 ","category":"page"},{"location":"models/kpp/#References-1","page":"The K-Profile-Parameterization (KPP)","title":"References","text":"","category":"section"},{"location":"models/kpp/#","page":"The K-Profile-Parameterization (KPP)","title":"The K-Profile-Parameterization (KPP)","text":"Large et al (1994)\nCVMix documentation\nVan Roekel et al (2018)","category":"page"},{"location":"models/modular_kpp/#Modular-K-Profile-Parameterization-1","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"newcommandc          \nnewcommandp          \nnewcommandd         partial\nnewcommandr1      mathrm1\nnewcommandb1      boldsymbol1\nnewcommandee        mathrme\nnewcommanddi         mathrmd\nnewcommandep        epsilon\n\nnewcommandbeq       beginequation\nnewcommandeeq       endequation\nnewcommandbeqs      begingather\nnewcommandeeqs      endgather\n\n Non-dimensional numbers\nnewcommandRi        mathrmRi\nnewcommandEk        mathrmEk\nnewcommandSL        mathrmSL\nnewcommandK         mathcalE\nnewcommandW         mathcalW\n\nnewcommandbtau      btau  wind stress vector\n\n Model functions and constants\nrenewcommandF2    Upsilon^1_2\nrenewcommandC2    C^1_2\n\nnewcommanduwind     u_star\nnewcommandubuoy     w_star\n\nnewcommandNL        NL","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"In the ModularKPP module, horizontally-averaged vertical turbulent fluxes are modeled with the combination of a local diffusive flux and a non-local non-diffusive flux:","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\noverlinew phi = - K_Phi d_z Phi + NL_Phi c\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where the depth dependence of the eddy diffusivity K_Phi is ","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nK_Phi propto h  W_Phi  Fd(d)  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where W_Phi is a turbulent velocity scale that in general depends on  Phi, the quantity being diffused, d equiv - z  h , and h is the 'mixing layer depth'. Typically Fd is the cubic polynomial","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nFd(d) = d ( 1 - d )^2  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"however, ModularKPP permits experimentation with different forms.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The formulation of diffusivity as the product of a magnitude with a with a shape or  'profile' function gives rise to the name. K-profile parameterization.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The non-local flux term NL_Phi models the effects of convective plumes.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"K-profile schemes with a non-local flux term thus have three basic components:","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"A model for the mixing layer depth h, over which K_Phi  0.\nA model for the magnitude of the diffusivity, K\nA model or \"shape function\" that determines the dependence of K as a function of d=-zh.\nA model for the non-local flux, NL_Phi.","category":"page"},{"location":"models/modular_kpp/#Model-instantiaton-1","page":"Modular K-Profile Parameterization","title":"Model instantiaton","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"A ModularKPP.Model is instantiated in the default configuration by writing ","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"using OceanTurb\nmodel = ModularKPP.Model()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"or,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"using OceanTurb\n\nmodel = Model(grid = UniformGrid(N=10, L=1.0),\n         constants = Constants(),\n       diffusivity = LMDDiffusivity(),\n      nonlocalflux = LMDCounterGradientFlux(),\n       mixingdepth = LMDMixingDepth(),\n          kprofile = StandardCubicPolynomial(),\n           stepper = :BackwardEuler,\n               bcs = ModelBoundaryConditions(eltype(grid)),\n           forcing = Forcing())","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"This builds a model on a UniformGrid with N=10 grid points and L=1.0 meters deep. The keyword arguments diffusivity, nonlocalflux, mixingdepth, and kprofile correspond  to a specific K-profile configuration proposed by Large et al (1994):","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"diffusivity = LMDDiffusivity() determines the turbulent velocity scale W_Phi    using the prescription proposed by LMD94\nnonlocalflux = LMDCounterGradientFlux() determines the nonlocal flux NL_Phi   using the prescription proposed by LMD94\nmixingdepth = LMDMixingDepth() determines the mixing depth h using the bulk   Richardson number criterion proposed by LMD94\nkprofile = StandardCubicPolynomial() uses the cubic polynomial d(1-d)^2 to set the primary    depth dependence of K_Phi, as proposed by LMD94.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"More subcomponent choices and details about their consequences are described in  Sub-components of ModularKPP.Model.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The keyword arguments constants, stepper, bcs, and forcing configure the model constants time stepper, boundary conditions, and forcing function. The only useful time-stepper at the moment is :BackwardEuler. The procedures for setting boundary conditions and defining forcing functions are described in  Setting boundary conditions and Defining forcing functions.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The default set of constants is returned by constants = Constants(), or","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"constants = Constants(\n     α = 2.5e-4, # thermal expansion coefficient [C⁻¹]\n     β = 8e-5,   # haline contraction coefficient [psu⁻¹]\n    ρ₀ = 1035,   # reference density [kg m⁻³]\n    cP = 3992,   # heat capacity `cP` [...]\n     f = 0,      # Coriolis parameter `f` [s⁻¹]\n     g = 9.81    # gravitational acceleration `g` [m² s⁻¹]\n)","category":"page"},{"location":"models/modular_kpp/#Setting-boundary-conditions-1","page":"Modular K-Profile Parameterization","title":"Setting boundary conditions","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"Two basic methods may be used to set boundary conditions. ","category":"page"},{"location":"models/modular_kpp/#Constant-and-standard-boundary-conditions-1","page":"Modular K-Profile Parameterization","title":"Constant and standard boundary conditions","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"For boundary conditions consisting of constant surface fluxes or constant bottom gradients, ","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"using OceanTurb\n\nmodel = ModularKPP.Model()\n\nmodel.bcs.U.top = BoundaryCondition(Flux, -1e-4)\nmodel.bcs.T.top = BoundaryCondition(Flux, 1e-4)\nmodel.bcs.T.bottom = BoundaryCondition(Gradient, model.constants.α * model.constants.g * 1e-5)","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"will, for example, set the top boundary condition on temperature T to a positive flux of 10^-4  mathrmm K  s^-2, a bottom temperature gradient that corresponds to a bottom buoyancy gradient of N^2 = 10^-5  mathrms^-2, and a top boundary condition on the horizontal velocity U to a negative flux.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"In an oceanic scenario, a positive surface temperature flux of Q_theta = 10^-4  is strongly destabilizing, corresponding to a heat flux of Q_h = rho_0 c_P Q_theta approx 413  mathrmW  m^-2, or in ordinary oceanographic parlance a 'heating' of -413  mathrmW  m^-2. (A positive surface flux extracts a quantity from the oceanic domain below; therefore  positive temperature flux acts to cool and destabilize at the ocean surface. This convention is standard –- an upward velocity leads to a positive flux, for example –- but is opposite the ordinary convention in oceanography.)","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"A negative flux of velocity accelerates surface fluid in the positive x-direction. A velocity flux, or kinematic stress of Q_u = -10^-4 corresponds to a friction velocity of u_star =  boldsymbolQ_u ^12 = 001  mathrmm  s^-1 and a dynamic stress of boldsymboltau = rho_0 boldsymbolQ_u approx -10^-1  mathrmN  m^-2.","category":"page"},{"location":"models/modular_kpp/#More-complex-boundary-conditions-1","page":"Modular K-Profile Parameterization","title":"More complex boundary conditions","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"For non-standard or more complicated boundary conditions that are enforced, for example, by time-dependent or nonlinear functions, a variable's boundary condition must be generated prior to model instantiation and passed to the model constructor. To set a time-dependent surface flux of temperature for example, write","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"using OceanTurb\n\n# Functions-as-boundary-conditions take a single argument of type `ModularKPP.Model`.\nfun_flux(model) = 1e-8 * cos(2π/day * model.clock.time)\n\n# Wrap `fun_flux` in a `BoundaryCondition` and specify its application as a flux.\ntop_temperature_bc = BoundaryCondition(Flux, fun_flux)\n\n# Instantiate boundary conditions for temperature with the flux function on top.\ntemperature_bcs = BoundaryConditions(top=top_temperature_bc)\n\n# Instantiate a model with the indicated temperature boundary condition and default\n# boundary conditions for all other variables.\nmodel = Model(bcs = ModelBoundaryConditions(T=temperature_bcs))\n\n# Constant boundary conditions of default type on other variables are still settable.\nmodel.bcs.T.bottom = BoundaryCondition(Gradient, model.constants.α * model.constants.g * 1e-5)","category":"page"},{"location":"models/modular_kpp/#Defining-forcing-functions-1","page":"Modular K-Profile Parameterization","title":"Defining forcing functions","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"Forcing functions have the signature forcing_func(model, i), where model::ModularKPP.Model, and i is the grid point at which the forcing is applied. For example, to apply a body force on U, write","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"using OceanTurb\n\n@inline body_force(model, i) = @inbounds -1e-1 * model.grid.zc[i] / model.grid.L\n\nmodel = Model(forcing = Forcing(U=body_force))","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"This instantiates a model with the specified body force applied to U, such that the U equation becomes","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\npartial_t U - f V = partial_z left ( K_U partial_z U right ) - 10^-1 fraczL  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The annotations @inline tells the julia compiler to \"inline\" the function, which typically  increases performance, and the @inbounds annotation instructs the compiler to elide  bounds checking when indexing the range model.grid.zc, which also saves time provided that body_force is never called with i out of bounds.","category":"page"},{"location":"models/modular_kpp/#Sub-components-of-ModularKPP.Model-1","page":"Modular K-Profile Parameterization","title":"Sub-components of ModularKPP.Model","text":"","category":"section"},{"location":"models/modular_kpp/#Mixing-depth-models-1","page":"Modular K-Profile Parameterization","title":"Mixing depth models","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The mixing depth model is configured via the keyword argument mixingdepth in the ModularKPP.Model constructor.","category":"page"},{"location":"models/modular_kpp/#CVMix-mixing-depth-model-1","page":"Modular K-Profile Parameterization","title":"CVMix mixing depth model","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The CVMix mixing depth model is instiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"mixingdepth = LMDMixingDepth()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The CVMix mixing depth model uses the 'bulk Richardson number' criterion proposed by Large et al (1994). This model is described in Mixing depth model in CVMix KPP.","category":"page"},{"location":"models/modular_kpp/#ROMS-mixing-depth-model-1","page":"Modular K-Profile Parameterization","title":"ROMS mixing depth model","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The ROMS mixing depth model is instantiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"mixingdepth = ROMSMixingDepth()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The mixing depth model used by the Regional Ocean Modeling System (ROMS) is described in appendix B of McWilliams et al (2009). The model introduces a 'mixing function' mathbbM, which is increased by shear and convection and decreased by stable stratification and rotation. mathbbM is defined","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq labelstabilization\nmathbb M(z) = int_z^0 FSL(z) left \n      left ( d_z bU right )^2 - fracd_z BCRi - CEk f^2\n    right   mathrmd z\n    - CK ubuoy^dagger N^dagger c\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nubuoy^dagger(z) equiv max left (0 -z F_b right )^13 c\n  quad mathrmand quad\nN^dagger(z) equiv max left (0 d_z B right )^12 p\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"Typically, the mixing function mathbb M(z) increases from 0 at z=0 into the well-mixed region immediately below the surface due to left ( d_z bU right )^2 and ubuoy^dagger N^dagger during convection, and decreases to negative values in the stratified region below the mixing layer due to the stabilizing action of -d_z B  CRi. The boundary layer depth is defined as the first nonzero depth where mathbb M(z) = 0.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"Finally, the 'surface layer exclusion' function,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq labelexclusion\nFSL equiv - fraczCSL h - z c\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"acts to exclude the values of left ( d_z bU right )^2 and d_z B at the top of the boundary layer from influencing the diagnosed boundary layer depth.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"McWilliams et al (2009) suggest CSL = 01, CK = 507, CRi = 03, and CEk = 211 for the free parameters in \\eqref{stabilization}.","category":"page"},{"location":"models/modular_kpp/#Diffusivity-models-1","page":"Modular K-Profile Parameterization","title":"Diffusivity models","text":"","category":"section"},{"location":"models/modular_kpp/#[Large-et-al-(1994)](https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/94rg01872)-1","page":"Modular K-Profile Parameterization","title":"Large et al (1994)","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The diffusivity model proposed by  Large et al (1994) (LMD94) is instantiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"diffusivity = LMDDiffusivity()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The LMD94 diffusivity model prescribes the turbulent velocity scale W_Phi(d) in the generic K-profile formulation,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nK_Phi propto h W^textLMD94_Phi(d) Fd(d)  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The formulation of W^textLMD94_Phi(d) is described in  K-Profile model in CVMix KPP.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"ModularKPP.Model permits a range of shape functions Fd(d) to be used with the LMD94 turbulent velocity scale W_Phi(d).","category":"page"},{"location":"models/modular_kpp/#Holtslag-(1998)-1","page":"Modular K-Profile Parameterization","title":"Holtslag (1998)","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The diffusivity model proposed by Holtslag in 1998 and described in  Siebesma et al (2007) is instantiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"diffusivity = HoltslagDiffusivity()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The Holtslag diffusivity uses the simple turublent velocity scale,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nW^textHoltslag = Ctau ubuoy left  left ( fracuwindubuoy right )^3 \n    + Ctau b d right ^13  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"Siebesma et al (2007), which pair the turbulent velocity scale W^textHoltslag with a cubic shape function,  a diagnostic plume model and simple mixing depth model, suggest Ctau = 04 and Ctau b = 156.","category":"page"},{"location":"models/modular_kpp/#Non-local-flux-models-1","page":"Modular K-Profile Parameterization","title":"Non-local flux models","text":"","category":"section"},{"location":"models/modular_kpp/#'Countergradient-flux'-model-1","page":"Modular K-Profile Parameterization","title":"'Countergradient flux' model","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The counter gradient flux model proposed by  Large et al (1994) is instantiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"nonlocalflux = LMDCounterGradientFlux()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"As described in  'Countergradient' non-local flux model in CVMix KPP, the non-local countergradient flux is defined only for T and S, and is","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nNL_phi = CNL F_phi d (1 - d)^2 c\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where d = -zh is a non-dimensional depth coordinate and CNL = 633.","category":"page"},{"location":"models/modular_kpp/#Diagnostic-plume-model-1","page":"Modular K-Profile Parameterization","title":"Diagnostic plume model","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The diagnostic plume model proposed by Siebesma et al (2007) is instantiated by writing","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"nonlocalflux = DiagnosticPlumeModel()","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The diagnostic plume model integrates equations that describe the quasi-equilibrium vertical momentum and  tracer budgets for plumes that plunge downwards from the ocean surface due to destabilizing buoyancy flux. ","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"In the diagnostic plume model, the non-local flux of a tracer Phi is parameterized as","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    NL_phi = Ca breve W left ( Phi - breve Phi right )  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where Ca = 01 is the plume area fraction, breve W is the plume vertical velocity, and breve Phi is plume-averaged concentration of the  tracer phi. When using a plume model in ModularKPP, Phi must be interpreted as the average concentration of phi in the environment, excluding plume regions. in OceanTurb.jl's implementation of the Siebesma et al (2007) the plume vertical velocity variance breve W^2 is used as a diagnostic variable,  rather than breve W. Due to this, the nonlocal flux in OceanTurb.jl becomes","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    NL_phi = -Ca sqrtbreve W^2 left ( Phi - breve Phi right )  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where we assume that breve W le 0.","category":"page"},{"location":"models/modular_kpp/#Continuous-plume-equations-1","page":"Modular K-Profile Parameterization","title":"Continuous plume equations","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The diagnostic, steady-state plume-averaged temperature and salinity budgets boil down to","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"begingather\n    d_z breve T = - epsilon left ( breve T - T right )   \n    d_z breve S = - epsilon left ( breve S - S right )  \nendgather","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where breve T and breve S are the plume-averaged temperature and salinity,  and T and S are the environment-averaged temperature and salinity and  epsilon(z h) is the parameterized entrainment rate, ","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nepsilon(z) = Cepsilon \n    left  frac1Delta c_N - z + frac1Delta c_N + left ( z + h right ) right   \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where Cepsilon = 04, Delta c_N is the spacing between the boundary and the topmost cell interface, and h is the mixing depth determined via the chosen mixing depth model.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The budget for plume vertical momentum is","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    d_z breve W^2 = Cbw left ( breve B - B right ) - Cepsilonw epsilon  breve W^2\neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where breve B = alpha breve T - beta breve S is the plume-averaged buoyancy and  B = alpha T - beta S is the environment-averaged buoyancy, Cbw = 286,  and Cepsilonw = 0572.","category":"page"},{"location":"models/modular_kpp/#Surface-layer-plume-initialization-model-and-numerical-implementation-1","page":"Modular K-Profile Parameterization","title":"Surface layer plume initialization model and numerical implementation","text":"","category":"section"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The plume equations require boundary conditions at z=0, or an initialization model  at the topmost node in the interior of the domain.  Note that breve T and breve S are defined at cell centers, and  breve W^2 is defined at cell interfaces.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The plume-averaged tracer concentration in the topmost cell is parameterized in terms of the tracer flux across the top boundary, Q_phi, with the formula","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    breve Phi(z=z_N) = Phi(z=z_N) - Calpha fracQ_phisigma_w(z_N)  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where Calpha = 10, and sigma_w(z) is an empirical expression for the  vertical velocity standard deviation,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    sigma_w = left ( Csigma tau uwind^3 + Csigma b ubuoy^3 d right )^13 left ( 1 - d right )^12  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"with Csigma tau = 22 and Csigma b = 132.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The boundary condition on plume vertical momentum prescribes no penetration through the ocean surface,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    breve W(z=0) = 0  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The advetion terms in the diagnostic plume equations are discretized with an downwind  scheme, which permits integration of each equation from the surface downward. The plume temperature advection term, for example, is defined at cell centers and discretized with","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nleft ( partial_z breve T right )_i+1 = fracbreve T_i+1 - breve T_iDelta c_i+1  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"At the same time, the terms on the right side of the plume temperature conservation  equation are evaluated at cell center i+1, which leads to the integral","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    breve T_i = breve T_i+1 + Delta c_i+1 epsilon left ( z_c i+1 right ) \n        left ( breve T_i+1 - T_i+1 right )  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"that determines the plume temperature at cell center i with respect to plume temperature, environment temperature, and entrainment quantities evaluated at cell center i+1. The plume salinity conservaiton equation is discretized analogously.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The downwind discretization of the plume vertical momentum advection term is","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\nleft ( partial_z breve W^2 right )_i+1 = frac breve W^2_i+1 - breve W^2_i Delta f_i+1  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The plume vertical momentum is defined at cell interfaces. This means that discretizing the right side of the plume vertical momentum equation requires interpolating the buoyancy field from cell centers to cell interfaces. The plume vertical velocity equation is thus","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\n    breve W^2_i = breve W^2_i+1 - Delta f_i+1 Cbw frac12 left ( breve B_i + breve B_i+1 - B_i - B_i+1 right ) + Delta f_i+1 Cepsilonw epsilon left ( z_f i+1 right ) breve W^2_i+1  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"The plume integration is stopped at grid point i when breve W^2_i+1  0.","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"To numerically integrate the environment-averaged tracer conservation equation,  the mass flux term is divided into two components,","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"beq\npartial_t Phi - partial_z left ( K_Phi partial_z Phi right ) \n                + partial_z left ( -Ca sqrtbreve W^2 Phi right )\n                = - Ca sqrtbreve W^2 breve Phi  \neeq","category":"page"},{"location":"models/modular_kpp/#","page":"Modular K-Profile Parameterization","title":"Modular K-Profile Parameterization","text":"where the diffusivity and mass flux term on the left are integrated implicitly in time, and the mass flux term on the right is integrated explicitly in time.","category":"page"},{"location":"models/edmf/#An-eddy-diffusivity-mass-flux-(EDMF)-scheme-1","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"","category":"section"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"newcommandc          \nnewcommandp          \nnewcommandd         partial\nnewcommandr1      mathrm1\nnewcommandb1      boldsymbol1\nnewcommandee        mathrme\nnewcommanddi         mathrmd\nnewcommandep        epsilon\n\nnewcommandbeq       beginequation\nnewcommandeeq       endequation\nnewcommandbeqs      begingather\nnewcommandeeqs      endgather\n\n Non-dimensional numbers\nnewcommandRi        mathrmRi\nnewcommandK         mathrmKE        \n\nnewcommandbtau      btau  wind stress vector\n\n Model functions and constants\nrenewcommandF2    Upsilon^1_2\nrenewcommandC2    C^1_2\n\nnewcommanduwind     u_star\nnewcommandubuoy     w_star\n\nnewcommanddefn      stackrelrdef=","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"The EDMF family of schemes parameterizes turbulent convection by introducing a conditional average that partitions the subgrid boundary layer flow into a turbulent 'environment' with area a_0, and non-turbulent updrafts and downdrafts with areas a_i for i0.","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"We consider two types of EDMF schemes: those with prognostic equations that model the time-evolution and spatial distribution of turbulent kinetic energy (TKE), and those that parameterize the effect of turbulent environmental mixing with a 'K-profile'.","category":"page"},{"location":"models/edmf/#Turbulent-eddy-diffusivty-and-mass-flux-1","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"Turbulent eddy diffusivty and mass flux","text":"","category":"section"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"In all schemes, the turbulent velocity fluxes are parameterized with an eddy diffusivity. For the x-velocity U, for example,","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\noverlinew u = d_z left ( K d_z U right ) c\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"where K is the eddy diffusivity. We consider various models for eddy diffusivity ranging from a model similar to the K-profile parameterizaton (KPP), and a formulation in terms of a prognostic, time- and z-dependent turbulent kinetic energy variable, e. The turbulent flux of scalars phi such as temperature and salinity is parameterized by both a turbulent flux and mass transport,","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\noverlineu phi = d_z left ( K d_z Phi right )\n  - d_z sum_i a_i tilde W_i tilde Phi_i c\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"where tilde Phi_i is the difference between the average of phi within domain i and the total horizontal average Phi:","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beginalign\ntilde Phi_i  defn left ( frac1A_i int_A_i rd A - frac1A int_A rd A right ) phi c \n= Phi_i - Phi c\nendalign","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"where we have introduced the notation Phi_i to denote the average of phi within the environment or updraft area A_i. The terms a_i tilde W_i tilde Phi_i account for the vertical transport of phi by environment and updraft vertical velocities W_i.","category":"page"},{"location":"models/edmf/#Zero-plume,-1.5-order-EDMF-scheme-1","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"Zero-plume, 1.5-order EDMF scheme","text":"","category":"section"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"A relatively simple EDMF scheme emerges in the limit of vanishing updrafts and downdrafts, in which case W = W_0 = a_0 = 0. In the 1.5-order version of this closure, turbulent diffusivity is modeled via the prognostic turbulent kinetic energy (TKE) equation","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\nd_t e = K left  left ( d_z U right )^2 + left ( d_z V right )^2 right  + d_z left ( K d_z e right )\n  - K d_z B - Cep frace^32ell c\n  labelTKE\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"where Cep = 20 is a model parameter, d_z B = g left( alpha d_z T - beta d_z S right ) is the buoyancy gradient in terms of gravitational acceleration g and thermal expansion and haline contraction coefficients alpha and beta, and K is the eddy diffusivity defined in terms of turbulent 'velocity' sqrte and a mixing length ell:","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\nK = CK underbrace\n      Ckappa z left ( 1 - Fa tfracQ_buwind^3 z right )^Fn\n        _defn ell\n         sqrte p\n        labeleddydiffusivity\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"In \\eqref{eddydiffusivity}, Q_b = g left ( alpha Q_theta - beta Q_s right ) is the buoyancy flux define in terms of temperature and salinity fluxes Q_theta and Q_s, and uwind defn  bQ_u ^12 is the friction velocity defined in terms of velocity flux bQ_u = btau  rho_0 or wind-stress btau and reference density rho_0. Ckappa = 041 and CK = 01 in \\eqref{eddydiffusivity} are the 'Von Karman' and eddy diffusivity model parameters, respectively. Fa and Fn in \\eqref{eddydiffusivity} are piecewise constant model functions that model the effect of boundary layer stability on the mixing length and are","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\nFa = left  beginmatrix\n-100  textfor unstable boundary layers with  Q_b  0 \n27  textfor stable boundary layers with  Q_b le 0\nendmatrix right  c\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"and","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"beq\nFn = left  beginmatrix\n02  textfor unstable boundary layers with  Q_b  0 \n-1  textfor stable boundary layers with  Q_b le 0\nendmatrix right  p\neeq","category":"page"},{"location":"models/edmf/#","page":"An eddy-diffusivity mass-flux (EDMF) scheme","title":"An eddy-diffusivity mass-flux (EDMF) scheme","text":"Note that parameterized buoyancy flux overlinew b defn -K d_z B appears in the TKE equation \\eqref{TKE}.","category":"page"},{"location":"models/pacanowskiphilander/#Pacanowski-Philander-1","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"","category":"section"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"newcommandc      \nnewcommandp      \nnewcommandd     partial\nnewcommandr1  mathrm1\nnewcommandee    mathrme\nnewcommandbeq   beginequation\nnewcommandeeq   endequation\nnewcommandbeqs  begingather\nnewcommandeeqs  endgather\nnewcommandRi    mathrmRi","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"In the model proposed by Pacanowski and Philander (1981), turbulent fluxes are diffusive, so that","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"overlinew phi = K_Phi d_z Phi c","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"where the diffusivity for velocity fields, K_U, is","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq labelmomentumdiffusivity\nK_U = nu_0 + fracnu_1left ( 1 + c Ri right )^n c\neeq","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"while the diffusivity for tracer fields is","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq labeltracerdiffusivity\nK_T = kappa_0 + frackappa_1left ( 1 + c Ri right )^n+1 p\neeq","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"In \\eqref{momentumdiffusivity} and \\eqref{tracerdiffusivity}, the local Richardson number Ri is defined","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq\nRi = fracd_z Bleft ( d_z U right )^2 + left ( d_z V right )^2 c\neeq","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"in terms of the buoyancy B = - g rho  rho_0, where g is gravitational acceleration, rho_0 is a reference density, and rho is the density deviation therefrom. With the linear equation of state","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq\nrho = rho_0 left  1 - alpha left ( T - T_0 right ) + beta left ( S - S_0 right ) right \neeq","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"near some reference temperature T_0 and reference salinity S_0, buoyancy B is given by","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq\nB = g left  alpha left ( T - T_0 right ) - beta left ( S - S_0 right ) right  c\neeq","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"and its vertical derivative is","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"beq\nd_z B = g left ( alpha d_z T - beta d_z S right ) p\neeq","category":"page"},{"location":"models/pacanowskiphilander/#Parameters-1","page":"Pacanowski-Philander","title":"Parameters","text":"","category":"section"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"Typical values for the model parameters in PP (see the text following equation 19 in chapter 3 of CV12) are","category":"page"},{"location":"models/pacanowskiphilander/#","page":"Pacanowski-Philander","title":"Pacanowski-Philander","text":"Parameter Value Units\nnu_0 10^-4 rm^2  s^-1\nnu_1 10^-2 rm^2  s^-1\nkappa_0 10^-5 rm^2  s^-1\nkappa_1 10^-2 rm^2  s^-1\nc 5 none\nn 2 none","category":"page"},{"location":"man/types/#Private-types-1","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [OceanTurb]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/functions/#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [OceanTurb]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#Base.Libc.time-Tuple{AbstractModel}","page":"Functions","title":"Base.Libc.time","text":"Get the current simulation time of the model.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.BoundaryConditions","page":"Functions","title":"OceanTurb.BoundaryConditions","text":"BoundaryConditions([T=Float64;] bottom = GradientBoundaryCondition(-zero(T)),\n                                   top = FluxBoundaryCondition(-zero(T)))\n\nReturns FieldBoundaryConditions with a bottom and top boundary condition. The type T is only relevant for the default values of bottom and top.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#OceanTurb.DefaultBoundaryConditions","page":"Functions","title":"OceanTurb.DefaultBoundaryConditions","text":"DefaultBoundaryConditions(T=Float64)\n\nReturns default oceanic boundary conditions: a zero GradientBoundaryCondition on bottom and a zero FluxBoundaryCondition on top.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#OceanTurb.ZeroFluxBoundaryConditions","page":"Functions","title":"OceanTurb.ZeroFluxBoundaryConditions","text":"ZeroFluxBoundaryConditions(T=Float64)\n\nConstruct FieldBoundaryConditions with a zero FluxBoundaryCondition at top and bottom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#OceanTurb.absolute_error","page":"Functions","title":"OceanTurb.absolute_error","text":"absolute_error(c, d, p=2)\n\nCompute the absolute error between c and d with norm p, defined as\n\nmathrmabs  error = left ( L^-1 int_-L^0 c-d^p  mathrmd z right )^(1p).\n\nWhen c and d are on different grids, d is interpolated to the same grid as c.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#OceanTurb.arraytype-Union{Tuple{Grid{T,A} where A}, Tuple{T}} where T","page":"Functions","title":"OceanTurb.arraytype","text":"arraytype(grid::Grid)\n\nReturn the array type corresponding to data that lives on grid. Defaults to Array. New data types (for example, grids that exist on GPUs) must implement new array types.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.fill_bottom_ghost_cell!-NTuple{4,Any}","page":"Functions","title":"OceanTurb.fill_bottom_ghost_cell!","text":"fill_bottom_ghost_cell!(c, κ, model, bc)\n\nUpdate the bottom ghost cell of c given the boundary condition bc, model, and diffusivity kappa. kappa is used only if a flux boundary condition is specified.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.fill_top_ghost_cell!-NTuple{5,Any}","page":"Functions","title":"OceanTurb.fill_top_ghost_cell!","text":"fill_top_ghost_cell!(c, κ, model, bc)\n\nUpdate the top ghost cell of c given boundary condition bc, model, and diffusivity kappa\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.iter-Tuple{AbstractModel}","page":"Functions","title":"OceanTurb.iter","text":"Get the current iteration of the model.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.iterate!-Tuple{Any}","page":"Functions","title":"OceanTurb.iterate!","text":"iterate!(model; Δt, Nt)\n\nStep model forward in time for Nt steps with step size Δt.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.iterate!-Union{Tuple{TS}, Tuple{AbstractModel{TS,G,TS1} where TS1 where G,Any}} where TS<:BackwardEulerTimestepper","page":"Functions","title":"OceanTurb.iterate!","text":"Step forward m by Δt with the backward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.oncell-Tuple{FaceField,Any}","page":"Functions","title":"OceanTurb.oncell","text":"oncell(f, i)\n\nReturn the interpolation of f onto cell point i.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.onface-Tuple{CellField,Any}","page":"Functions","title":"OceanTurb.onface","text":"onface(c, i)\n\nReturn the interpolation of c onto face point i.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.relative_error","page":"Functions","title":"OceanTurb.relative_error","text":"relative_error(c, d, p=2)\n\nCompute the relative error between c and d with norm p, defined as\n\nbeq\nmathrmrel  error = fracleft ( int_-L^0 (c-d)^p  mathrmd z right )^(1p)\n                             left ( int_-L^0 d^p  mathrmd z right )^(1p)\neeq\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#OceanTurb.set!-Tuple{AbstractSolution}","page":"Functions","title":"OceanTurb.set!","text":"set!(solution, kwargs...)\n\nSet the fields of a solution. For example, use\n\nT0 = rand(4) S0(z) = exp(-z^2/10) set!(solution, T=T0, S=S0)\n\nTo set solution.T and solution.S to T0 and S0.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.set_bcs!-Tuple{Any}","page":"Functions","title":"OceanTurb.set_bcs!","text":"set_bcs!(model; bcspecs...)\n\nSet boundary conditions of model solution fields. The keyword argument name must be the name of a model solution and its value is a (bottombc, topbc) tuple.\n\nExample\n\njulia> set_bcs!(model, c=(FluxBoundaryCondition(-1),                           FluxBoundaryCondition(0))                 )\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.Δc-Tuple{UniformGrid,Any}","page":"Functions","title":"OceanTurb.Δc","text":"Return the cell spacing at index i.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.Δf-Tuple{UniformGrid,Any}","page":"Functions","title":"OceanTurb.Δf","text":"Return the face spacing at index i.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z!-Tuple{CellField,FaceField}","page":"Functions","title":"OceanTurb.∂z!","text":"Calculate c = ∂f/∂z in the grid interior.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z!-Tuple{FaceField,CellField}","page":"Functions","title":"OceanTurb.∂z!","text":"Calculate f = ∂c/∂z in the grid interior.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z-Tuple{Any,Any}","page":"Functions","title":"OceanTurb.∂z","text":"∂z(a, i)\n\nReturn the discrete derivative of a at grid point i.\n\nThe derivative of a CellField is computed at face points, and the derviative of a FaceField is computed at cell points.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z-Tuple{Any}","page":"Functions","title":"OceanTurb.∂z","text":"Return the CellField ∂f/∂z, where f is a FaceField.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z-Tuple{CellField,Any}","page":"Functions","title":"OceanTurb.∂z","text":"Return ∂c/∂z at face index i.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z-Tuple{CellField}","page":"Functions","title":"OceanTurb.∂z","text":"Return the FaceField ∂c/∂z, where c is a CellField.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#OceanTurb.∂z-Tuple{FaceField,Any}","page":"Functions","title":"OceanTurb.∂z","text":"Return ∂c/∂z at face index i.\n\n\n\n\n\n","category":"method"}]
}
